{"version":3,"sources":["uploadBusboy.ts"],"names":[],"mappings":"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","file":"uploadBusboy.js","sourceRoot":"..\\src","sourcesContent":["import Busboy = require(\"busboy\")\r\n/**\r\n * This file is a standalone utility for uploading files with the uploadBusboy library.\r\n * Busboy is a parser that reads all uploaded files. Through configuration it is possible\r\n * to extend the default functionality aswel as override the default functionality.\r\n * \r\n * \r\n * Notes for reading this code: \r\n * - Every function is extensively typed. Each function respects it's definition written above it without unneccerary typecasting.\r\n * - Types from the config object should and will be reflected wherever you'd expect. This did require a lot of explaining to typescript. This is fine, because\r\n *      it means explicit output for end-users of this utility.\r\n * - HOC (Higher Order Functions) are prefixed with 'create'\r\n * - Every function has a comment, these should show up when hovering over these types with something like vscode\r\n * - The only (non-native) dependency is `busboy`\r\n */\r\n\r\n/** Generic function used together with extends */\r\ntype AnyFunction = (...args: any[]) => any\r\n\r\n/** Trick that turns `A | B | C` to `A & B & C` */\r\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\r\n\r\n/** Combined functions of array as one function */\r\ntype combinedCreatorArr<F extends AnyFunction, O extends Array<F>> = (...args: Parameters<O[number]>) => UnionToIntersection<ReturnType<O[number]>>\r\n\r\ntype createUnifiedFunction = <F extends AnyFunction, O extends Array<F>>(...fns: O) => combinedCreatorArr<F,O>\r\n/** Returns a function that recursively calls all functions in a array -with the same arguments- and combines results */\r\nconst createUnifiedFunction: createUnifiedFunction = (...fns) => fns.reduce(\r\n    (prev: any, creator: any) => (...args: any[]) => Object.assign(prev(...args), creator(...args))\r\n    , () => ({})\r\n)\r\n\r\n/** A unified type of two objects*/\r\ntype merged<y, x> = {\r\n    [k in (keyof y | keyof x)]: k extends keyof x\r\n    ? x[k]\r\n    : k extends keyof y ? y[k]\r\n    : never\r\n}\r\ntype merge = <x, y>(y: y, x: x) => merged<y, x>\r\n/** Merge two objects and cast to a more readable type definition (seen when hovering over things) */\r\nconst merge: merge = (y, x) => Object.assign(y, x) as merged<typeof y, typeof x>\r\n\r\n/** \r\n * Adds the ability to call a function without arguments which will return the history of the function.\r\n * This makes the function impure and thus hard for Typescript to reason about, but it does add some cool functionality,\r\n * namely state. This impurity is eleviated by typecasting to the original function(s) (meaning the function passed in to the store function)\r\n */\r\ntype store<T extends AnyFunction> = {\r\n    (...funcArgs: Parameters<T>): ReturnType<T>\r\n    (): { [k: string]: ReturnType<T>[] }\r\n}\r\n\r\n/**\r\n * Upgrades a function to store and list all previous results.\r\n * \r\n * @remarks\r\n * The upgraded function will behave like the original when called with arguments, but will list a object\r\n * containing all previous results when called without arguments. Each result\r\n * will be keyed by their first argument, which must always be a string. A key can have multiple\r\n * results, which is why all results are put in a array.\r\n * ```ts\r\n * const create = (fieldname,value)=>({[fieldname]:value})\r\n * const myStore = createStore(create)\r\n * myStore('A','some')\r\n * myStore('B','values')\r\n * console.log(myStore('A','thing')) // {A:'thing'}\r\n * console.log(myStore()) // { A: [{A:'some'},{A:'thing'}], B: [{B:'values'}] }\r\n * ```\r\n */\r\ntype createStore = <T extends AnyFunction>(func: T) => store<T>\r\nconst _createStore: createStore = (func, obj = {} as any) => (...args: any[]) => {\r\n    if (!args.length || !obj) return obj\r\n    const r = func(...args);\r\n    obj = {\r\n        ...obj,\r\n        [args[0]]: [\r\n            ...(obj[args[0]] || []),\r\n            r\r\n        ],\r\n    }\r\n    return r;\r\n}\r\n\r\n/** Wraps each value of a object with store, see @see store */\r\ntype wrappedStore<O extends { [k: string]: any }> = { [k in keyof O]: store<O[k]> }\r\n\r\n/**\r\n * Wraps all values of a object in a store type\r\n * todo: make the store function generic somehow, this is hard\r\n * because our store function has two signatures (with and without parameters)\r\n */\r\ntype wrapStore = <T extends AnyFunction, O extends { [k: string]: any }>(func: T, obj: O) => wrappedStore<O>\r\nconst _wrapStore: wrapStore = (func, obj) =>\r\n    Object.entries(obj)\r\n        .reduce(\r\n            (prev, [key, value]) => Object.assign(prev, { [key]: func(value) }),\r\n            <typeof obj>{}\r\n        )\r\n\r\n/** Generic function for files */\r\ntype AnyFileFunction<RETURN> = (fieldname: string, file: NodeJS.ReadableStream, filename: string, encoding: string, mimetype: string) => RETURN\r\n\r\n/** filesCreate turns file arguments in to a object */\r\ntype files = AnyFileFunction<{\r\n    fieldname: string\r\n    file: NodeJS.ReadableStream\r\n    filename: string\r\n    encoding: string\r\n    mimetype: string\r\n}>\r\nconst _files: files = (fieldname, file, filename, encoding, mimetype) => ({\r\n    fieldname,\r\n    file,\r\n    filename,\r\n    encoding,\r\n    mimetype\r\n})\r\ntype fileWrites = AnyFileFunction<{ destination: Promise<string> }>\r\n/**\r\n * Turns file and filename argument in to a writestream in a folder\r\n * NOTE: this one has a depenceny on utils, which is a extra function call\r\n */\r\ntype fileWritesCreate = ({ tmpdir, tmpname }: merged<utils, any>) => fileWrites\r\nconst _createFileWrites: fileWritesCreate = ({ tmpdir, tmpname }) => {\r\n    const fs = require('fs');\r\n    const path = require('path');\r\n    return (...args) => ({\r\n        destination: new Promise((resolve, reject) => {\r\n            const destination = path.join(tmpdir(...args), tmpname(...args));\r\n            const writeStream = fs.createWriteStream(destination);\r\n            args[1].pipe(writeStream);\r\n            args[1].on('end', () => { writeStream.end(); });\r\n            writeStream.on('finish', () => resolve(destination));\r\n            writeStream.on('error', reject);\r\n        })\r\n    })\r\n}\r\n\r\n/** Default function to create a file buffer */\r\ntype fileBuffers = AnyFileFunction<{ buffer: Promise<Buffer> }>\r\nconst _fileBuffers: fileBuffers = (_, file) => ({\r\n    buffer: new Promise<Buffer>((resolve, reject) => {\r\n        const imgResponse: Uint8Array[] = [];\r\n        file.on('store', (store) => {\r\n            imgResponse.push(store);\r\n        });\r\n        file.on('end', () => {\r\n            resolve(Buffer.concat(imgResponse));\r\n        });\r\n        file.on('error', reject);\r\n    })\r\n})\r\n\r\n/** Default listeners for files (may be extended through config) */\r\ntype onFile = {\r\n    fileWrites: fileWrites,\r\n    fileBuffers: fileBuffers,\r\n    files: files,\r\n}\r\n\r\n/** Generic function for fields */\r\ntype AnyFieldFunction<RETURN> = (fieldname: string, val: any, fieldnameTruncated: boolean, valTruncated: boolean, encoding: string, mimetype: string) => RETURN\r\n\r\ntype fields = AnyFieldFunction<{\r\n    fieldname: string,\r\n    val: any,\r\n    fieldnameTruncated: boolean,\r\n    valTruncated: boolean,\r\n    encoding: string,\r\n    mimetype: string\r\n}>\r\n/** Turns field arguments in to a object with named keys */\r\nconst _fields: fields = (fieldname, val, fieldnameTruncated, valTruncated, encoding, mimetype) => ({\r\n    fieldname,\r\n    val,\r\n    fieldnameTruncated,\r\n    valTruncated,\r\n    encoding,\r\n    mimetype\r\n})\r\n\r\n/** Default listeners for fields (may be extended through config) */\r\ntype onField = {\r\n    fields: fields\r\n}\r\n\r\n/** Object.values equivalent for typescript */\r\ntype valuesOf<T extends object> = T extends { [k in keyof T]: infer U } ? U[] : never\r\n\r\n/** default temporary directory used for fileWrites */\r\ntype tmpdir = AnyFileFunction<string>;\r\n\r\n/** default temporary filename used for fileWrites */\r\ntype tmpname = AnyFileFunction<string>;\r\n\r\n\r\n/** The utilities for fileWriteCreate */\r\ntype utils = {\r\n    tmpdir: tmpdir\r\n    tmpname: tmpname,\r\n}\r\n\r\n/** the default configuration of this program */\r\nexport type ConfigDefaults = {\r\n    createStore: createStore\r\n    wrapStore: wrapStore\r\n    newBusboy: newBusboy\r\n    utils: utils\r\n    onFile: onFile\r\n    onField: onField\r\n};\r\n\r\n/** the configuration given by a programmer */\r\nexport type Config = {\r\n    createStore?: createStore\r\n    wrapStore?: wrapStore\r\n    newBusboy?: newBusboy\r\n    utils?: { [k: string]: AnyFunction }\r\n    onFile?: { [k: string]: AnyFileFunction<object> }\r\n    onField?: { [k: string]: AnyFieldFunction<object> }\r\n}\r\n\r\n\r\n\r\n/** A accurate definition of merged config, reflects any possible configuration */\r\nexport type mergedConfig<C extends Config> = {\r\n    createStore: C['createStore'] extends createStore ? C['createStore'] : createStore\r\n    wrapStore: C['wrapStore'] extends wrapStore ? C['wrapStore'] : wrapStore\r\n    newBusboy: C['newBusboy'] extends newBusboy ? C['newBusboy'] : newBusboy\r\n    utils: merged<utils, (C[\"utils\"] extends functionObject ? C[\"utils\"] : {})>\r\n    onFile: merged<onFile, (C[\"onFile\"] extends functionObject ? C[\"onFile\"] : {})>\r\n    onField: merged<onField, (C[\"onField\"] extends functionObject ? C[\"onField\"] : {})>\r\n}\r\n\r\ntype functionObject = { [k: string]: AnyFunction }\r\n/** Test to see if a object only contains functions */\r\nfunction isFunctionObject<O extends functionObject>(o: any): o is O\r\nfunction isFunctionObject<O>(o: any) {\r\n    return typeof o === 'object' && Object.values(o).findIndex(func => typeof func !== 'function') === -1;\r\n}\r\n\r\n/** `createUploadBusboy config property 'onFile|utils|onField' should be a object that only contains functions` */\r\nconst fnsOnlyErr = (name: string) => new Error(`createUploadBusboy config property \\'${name}\\' should be a object that only contains functions`)\r\n\r\n/** A inbetween state of merging config type definitions, either this or that */\r\ntype simpleMergedConfig<C extends Config> = {\r\n    createStore: C['createStore'] | createStore\r\n    wrapStore: C['wrapStore'] | wrapStore\r\n    newBusboy: C['newBusboy'] | newBusboy\r\n    utils: C['utils'] | utils\r\n    onFile: C['onFile'] | onFile\r\n    onField: C['onField'] | onField\r\n}\r\n\r\ntype mergeConfig = <C extends Config>(config?: C) => mergedConfig<C>\r\n/** Assigns all the default functions to the config object */\r\nconst mergeConfig: mergeConfig = (config = {} as any) => {\r\n    if (!isFunctionObject(config.utils)) throw (fnsOnlyErr('utils'))\r\n    if (!isFunctionObject(config.onFile)) throw (fnsOnlyErr('onFile'))\r\n    if (!isFunctionObject(config.onField)) throw (fnsOnlyErr('onField'))\r\n    const utils = merge(\r\n        <utils>{\r\n            tmpname: (_, __, filename) => filename,\r\n            tmpdir: require('os').tmpdir\r\n        },\r\n        config.utils || {}\r\n    );\r\n    return {\r\n        onField: merge(\r\n            <onField>{\r\n                fields: _fields\r\n            },\r\n            config.onField || {}\r\n        ),\r\n        onFile: merge(\r\n            <onFile>{\r\n                fileWrites: _createFileWrites(utils),\r\n                fileBuffers: _fileBuffers,\r\n                files: _files\r\n            },\r\n            config.onFile || {}\r\n        ),\r\n        utils,\r\n        newBusboy: typeof config.newBusboy === 'function' ? config.newBusboy : _newBusboy,\r\n        wrapStore: typeof config.wrapStore === 'function' ? config.wrapStore : _wrapStore,\r\n        createStore: typeof config.createStore === 'function' ? config.createStore : _createStore\r\n    } as simpleMergedConfig<typeof config> as mergedConfig<typeof config>\r\n}\r\n\r\n\r\n/** infers the return type of a Promise */\r\ntype UnpackPromise<T> = T extends Promise<infer U> ? U : T;\r\n\r\ntype newBusboy = (busboyConfig: busboy.BusboyConfig) => busboy.Busboy;\r\n/** creates a new instance of busboy class */\r\nconst _newBusboy: newBusboy = busboyConfig => new Busboy(busboyConfig)\r\n\r\n/** infers the return type of Promises attached to a object */\r\ntype resolved<T extends any> = { [s in keyof T]: UnpackPromise<T[s]>; }\r\n\r\n/**\r\n * Turns all promise-values of a object in to a single promise returning the object with values resolved\r\n */\r\ntype resolver = <T extends { [k: string]: any }>(obj: T) => Promise<resolved<T>>\r\nconst resolver: resolver = async obj => {\r\n    for (let key in obj)\r\n        if (obj.hasOwnProperty(key) && typeof obj[key].then === 'function')\r\n            obj[key] = await obj[key];\r\n    return obj;\r\n}\r\n\r\n/** The results of the start function without any config changes */\r\nexport type defaultResults = resolved<ReturnType<onFileMergedConf<{}>>[]>\r\n\r\n/** The combination of default onFile configuration and the onFile configuration given by a end-user, if any */\r\ntype onFileMergedConf<ONFILE extends { [k: string]: any }> = ONFILE[string] extends AnyFileFunction<any>\r\n    ? combinedCreatorArr<AnyFileFunction<any>,valuesOf<ONFILE>>\r\n    : never\r\ntype onFieldMergedConf<ONFIELD extends { [k: string]: any }> = ONFIELD[string] extends AnyFieldFunction<any>\r\n    ? combinedCreatorArr<AnyFieldFunction<any>,valuesOf<ONFIELD>>\r\n    : never\r\n\r\n/** The api facing a end-user of createUploadBusboy, this the returnType of createUploadBusboy */\r\ntype api<C extends Config, MC extends mergedConfig<C>> = {\r\n    busboy: busboy.Busboy\r\n    utils: MC['utils']\r\n    onFile: store<combinedCreatorArr<AnyFunction, (AnyFileFunction<{\r\n        fieldname: string;\r\n        file: NodeJS.ReadableStream;\r\n        filename: string;\r\n        encoding: string;\r\n        mimetype: string;\r\n    }> | onFileMergedConf<MC['onFile']> | AnyFileFunction<any>)[]>>,\r\n    onField: store<combinedCreatorArr<AnyFunction, (AnyFieldFunction<{\r\n        fieldname: string;\r\n        val: any;\r\n        fieldnameTruncated: boolean;\r\n        valTruncated: boolean;\r\n        encoding: string;\r\n        mimetype: string;\r\n    }> | onFieldMergedConf<MC['onField']>)[]>>,\r\n    start: start<MC>\r\n} & wrappedStore<MC['onField']> & wrappedStore<MC['onFile']> & start<MC>\r\n\r\n/** The start function with and without callback */\r\ntype start<MC extends mergedConfig<any>> = {\r\n    <CB extends ((done: resolved<ReturnType<onFileMergedConf<MC['onFile']>>>) => any)>(cb: CB): Promise<resolved<ReturnType<CB>[]>>\r\n    (): Promise<resolved<ReturnType<onFileMergedConf<MC['onFile']>>>[]>\r\n}\r\n\r\ntype createApi = <R extends { rawBody: any, headers: object }, C extends Config, MC extends mergedConfig<C>>(request: R, config: MC) => api<C, MC>\r\n/** Generete the api facing a end-user of this utility. This is the interface of the program.\r\n *  The api/interface is actually just a function, but also has uttility functions attached to it; think \"callable object\" */\r\nexport const createApi: createApi = (request, config) => {\r\n    const { utils, newBusboy, onField, onFile, createStore, wrapStore } = config\r\n    /** the newBusboy function may be from config */\r\n    const busboy = newBusboy({ headers: request.headers })\r\n    /** onFile is extendable through config */\r\n    const onFileSubStores = wrapStore(\r\n        createStore,\r\n        onFile\r\n    )\r\n    /** onFile is a function that stores the combination of all substores */\r\n    const handleOnFile = createStore(\r\n        createUnifiedFunction(\r\n            /**  \r\n             * Don't use substores ReturnTypes because the two function signatures of store will obvuscate the function signature.\r\n             * However, we still want to give it as a parameter, as this will populate our substores\r\n            */\r\n            ...Object.values(onFileSubStores as unknown as onFile)\r\n        )\r\n    )\r\n\r\n    /** fields have the same logic as files. Eventhough there is just one default function, additional ones could be configured */\r\n    const onFieldSubStores = wrapStore(\r\n        createStore,\r\n        onField\r\n    )\r\n    const handleOnField = createStore(\r\n        createUnifiedFunction(\r\n            ...Object.values(onFieldSubStores as unknown as onField)\r\n        )\r\n    )\r\n    const start = async (cb?: AnyFunction) => {\r\n        const filePromises: any[] = []\r\n        const handler = (typeof cb === 'function')\r\n            ? <P extends Promise<any>>(done: P) => filePromises.push(done.then(cb))\r\n            : <P extends Promise<any>>(done: P) => filePromises.push(done);\r\n        const promise = new Promise<void>((resolve, reject) => {\r\n            busboy.on('finish', resolve)\r\n            busboy.on('partsLimit', reject)\r\n            busboy.on('filesLimit', reject)\r\n            busboy.on('fieldsLimit', reject)\r\n        });\r\n        if (handleOnField()) busboy.on('field', handleOnField)\r\n        if (handleOnFile()) busboy.on('file', (...args) => {\r\n            handler(resolver(handleOnFile(...args)))\r\n        })\r\n        busboy.end(request.rawBody) // start busboy\r\n        await promise\r\n        return Promise.all(filePromises);\r\n    }\r\n    return Object.assign(start, {\r\n        ...onFileSubStores,\r\n        ...onFieldSubStores,\r\n        busboy,\r\n        onFile: handleOnFile,\r\n        utils,\r\n        onField: handleOnField,\r\n        start\r\n    })\r\n}\r\n\r\n/**\r\n * This is the main/default function and returns\r\n * the api/interface upon receiving the request object and a optional configuration object.\r\n */\r\nexport type createUploadBusboy = <\r\n    R extends { rawBody: any, headers: object },\r\n    C extends Config\r\n    >(\r\n    request: R,\r\n    config?: C,\r\n) => api<C, mergedConfig<C>>\r\nexport const createUploadBusboy: createUploadBusboy = (request, config) => createApi(request, mergeConfig(config))\r\n\r\nexport default createUploadBusboy"]}